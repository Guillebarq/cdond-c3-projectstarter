version: 2.1

commands:
  install_awscli:
    description: Install AWS CLI v2
    steps:
      - run:
          name: Install AWS CLI v2
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
  install_ansible:
    description: Install Ansible
    steps:
      - run:
          name: Install Ansible
          command: |
            sudo apt update
            sudo apt install software-properties-common -y
            sudo add-apt-repository --yes --update ppa:ansible/ansible
            sudo apt install ansible -y
  install_nodejs:
    description: Install Node.js 13
    steps:
      - run:
          name: Install Node.js 13
          command: |
            curl -fsSL https://deb.nodesource.com/setup_13.x | sudo -E bash -
            sudo apt install -y nodejs
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      Workflow_ID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.Workflow_ID >>
            aws s3 rm s3://udapeople-<<parameters.Workflow_ID>> --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.Workflow_ID >>
  revert-migrations:
    description: Revert the last migration
    parameters:
      Workflow_ID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure  https://kvdb.io/${KVDB_BUCKET}/migration_<< parameters.Workflow_ID >>)
            # Logic for reverting the database state
            if (( $SUCCESS == 1 ));
            then
              cd ~/project/backend
              npm install
              npm run migration:revert
            fi
jobs:
  build-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-deps]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-deps
  build-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
  test-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-deps]
      - run:
          name: Front-end Unit Test
          command: |
            cd frontend
            npm install
            npm test
  test-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end Unit Test
          command: |
            cd backend
            npm install
            npm test
  scan-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-deps]
      - run:
          name: Front-end Scan
          command: |
            cd frontend
            npm install
            npm audit fix --force --audit-level=critical
            npm audit fix --force --audit-level=critical
            npm audit --audit-level=critical
  scan-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end Scan
          command: |
            cd backend
            npm install
            npm audit fix --force --audit-level=critical
            npm audit fix --force --audit-level=critical
            npm audit --audit-level=critical
  deploy-infrastructure:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_awscli
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            echo $BACKEND_PUBLIC_IP >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      
      - destroy-environment

  configure-infrastructure:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_awscli
      - install_ansible
      - add_ssh_keys:
          fingerprints: ["a3:53:76:98:e7:60:8e:ce:d2:82:a1:4f:77:e7:1a:7f"]
      - attach_workspace:
          at: ~/
      - run:
          name: Configure Server
          command: |
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment
  run-migrations:
    docker:
      - image: circleci/node:13.8.0 # safest to use to avoid migration errors
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            sudo apt install -y tar gzip curl
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip -qq awscliv2.zip
            sudo ./aws/install
      - restore_cache:
          keys: [backend-build]
      - attach_workspace:
          at: ~/
      - run:
          name: Run migrations
          command: |
            cd backend
            npm run migrations >> migrations.txt
      - run:
          name: Send migration results to kvdb
          command: |
            if grep -q "success" ~/project/backend/migrations.txt
            then
              curl --insecure https://kvdb.io/LBcnJjxskczGJWNszqSJsH/migration_${CIRCLE_WORKFLOW_ID:0:7} -d '1'
            fi
      - destroy-environment
      - revert-migrations
  deploy-frontend:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_awscli
      - install_nodejs
      - restore_cache:
          keys: [frontend-deps]
      - run:
          name: Install dependencies
          command: |
            cd frontend
            npm install
      - run:
          name: Get backend url
          command: |
            BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            echo "API_URL=http://${BACKEND_PUBLIC_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm run build
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-environment
      - revert-migrations
  deploy-backend:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_awscli
      - install_ansible
      - install_nodejs
      - add_ssh_keys:
          fingerprints: ["a3:53:76:98:e7:60:8e:ce:d2:82:a1:4f:77:e7:1a:7f"]
      - attach_workspace:
          at: ~/
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Install dependencies
          command: |
            cd backend
            npm install
      - run:
          name: Package Backend
          command: |
            cd backend
            npm run build
            tar -czf artifact.tar.gz dist/* package*
            cd ..
            cp backend/artifact.tar.gz .circleci/ansible/roles/deploy/files
      - run:
          name: Deploy backend
          command: |
            export TYPEORM_MIGRATIONS_DIR=./migrations
            export TYPEORM_ENTITIES=./modules/domain/**/*.entity{.ts,.js}
            export TYPEORM_MIGRATIONS=./migrations/*.ts
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      - destroy-environment
      - revert-migrations

  smoke-test:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_awscli
      - install_nodejs
      - run:
          name: Backend smoke test.
          command: |
            BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            export API_URL=http://${BACKEND_PUBLIC_IP}:3030
            if curl -s $API_URL/api/status | grep "ok"
            then
              exit 0
            else
              exit 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            FRONTEND_WEBSITE=http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website.${AWS_DEFAULT_REGION}.amazonaws.com
            if curl -s $FRONTEND_WEBSITE | grep "Welcome"
            then
              exit 0
            else
              exit 1
            fi
      - destroy-environment
      - revert-migrations

  cloudfront-update:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_awscli
      - install_nodejs
      - run:
          name: Save Old Workflow ID to kvdb.io
          command: |
            export OLD_WORKFLOW_ID=$(aws cloudformation \
                      list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                      --no-paginate --output text)
            echo "Old Wokflow ID: $OLD_WORKFLOW_ID"
            curl https://kvdb.io/LBcnJjxskczGJWNszqSJsH/old_workflow_id -d "${OLD_WORKFLOW_ID}"
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --parameter-overrides WorkflowID="udapeople-${CIRCLE_WORKFLOW_ID:0:7}" \
              --stack-name InitialStack \
              --tags project=udapeople
      - destroy-environment
      - revert-migrations
  cleanup:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_awscli
      - install_nodejs
      - run:
          name: Fetch old stack worklow ID and cleanup
          command: |
            ## Fetch the Old workflow ID
            export OldWorkflowID=$(aws cloudformation \
                      list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                      --no-paginate --output text)
            echo OldWorkflowID: "${OldWorkflowID}"
            echo CIRCLE_WORKFLOW_ID: "${CIRCLE_WORKFLOW_ID:0:7}"
            ## Fetch the stack names          
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
                      --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
            echo Stack names: "${STACKS[@]}"
            echo Old Workflow ID: $OldWorkflowID 
            if [[ "${CIRCLE_WORKFLOW_ID:0:7}" != "${OldWorkflowID}" ]]
            then
              echo '----------------------------------Delete Confirmed------------------------------------'
              aws s3 rm "s3://${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
            else
              echo '------------------------------------Cannot Cleanup------------------------------------'
            fi
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]

# version: 2.1

# orbs:
#   slack: circleci/slack@4.12.5
#   aws-cli: circleci/aws-cli@3.1.1

# commands:
#   install_awscli:
#     description: Install AWS CLI v2
#     steps:
#       - run:
#           name: Install AWS CLI v2
#           command: |
#             curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
#             unzip awscliv2.zip
#             sudo ./aws/install
#   install_ansible:
#     description: Install Ansible
#     steps:
#       - run:
#           name: Install Ansible
#           command: |
#             sudo apt update
#             sudo apt install software-properties-common -y
#             sudo add-apt-repository --yes --update ppa:ansible/ansible
#             sudo apt install ansible -y
#   install_nodejs:
#     description: Install Node.js 13
#     steps:
#       - run:
#           name: Install Node.js 13
#           command: |
#             curl -fsSL https://deb.nodesource.com/setup_13.x | sudo -E bash -
#             sudo apt install -y nodejs
#   destroy-environment:
#     description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
#     parameters:
#       # Add parameter here
#       Workflow_ID:
#         type: string
#         default: ${CIRCLE_WORKFLOW_ID:0:7}   
#     steps:
#       - run:
#           name: Destroy environments
#           when: on_fail
#           command: |
#             echo "Destroying environment: << parameters.Workflow_ID >> "
#             aws --region us-east-1 s3 rm s3://udapeople-<<parameters.Workflow_ID>> --recursive
#             aws --region us-east-1 cloudformation delete-stack --stack-name udapeople-backend-<< parameters.Workflow_ID >>
#             aws --region us-east-1 cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.Workflow_ID >>

#   revert-migrations:
#     description: Revert the last migration if successfully run in the current workflow.
#     parameters:
#       Workflow_ID:
#         type: string
#         default: ${CIRCLE_WORKFLOW_ID:0:7}     
#     steps:
#       - run:
#           name: Revert migrations
#           when: on_fail
#           command: |
#             SUCCESS=$(curl --insecure  https://kvdb.io/LBcnJjxskczGJWNszqSJsH/migration_<< parameters.Workflow_ID >>)
#             if(( $SUCCESS==1 )); 
#             then
#                 cd ~/project/backend
#                 npm install
#                 npm run migration:revert
#             fi
            
# jobs:
#   build-frontend:
#     docker:
#       - image: circleci/node:13.8.0
#     steps:
#       - checkout
#       - restore_cache:
#           keys: [frontend-build]
#       - run:
#           name: Build front-end
#           command: |
#             cd frontend
#             npm install
#             npm run build
#       - save_cache:
#           paths: [frontend/node_modules]
#           key: frontend-build

#   build-backend:
#     docker:
#       - image: circleci/node:13.8.0
#     steps:
#       - checkout
#       - restore_cache:
#           keys: [backend-build]
#       - run:
#           name: Back-end build
#           command: |
#              cd backend
#              npm install
#              npm run build
#       - save_cache:
#           paths: [backend/node_modules]
#           key: backend-build

#   test-frontend:
#     docker:
#       # Docker image here
#       - image: circleci/node:13.8.0
#     steps:
#       # Checkout code from git
#       - checkout
#       # Restore from cache
#       - restore_cache:
#           keys: [frontend-build]
#       # Your job code here
#       - run:
#           name: Test front-end
#           command: |
#             cd frontend
#             npm i
#             npm run test
                
#   test-backend:
#     docker:
#       # Docker image here
#       - image: circleci/node:13.8.0
#     steps:
#       # Checkout code from git
#       - checkout
#       # Restore from cache
#       - restore_cache:
#           keys: [backend-build]
#       # Your job code here
#       - run:
#           name: Test back-end
#           command: |
#             cd backend
#             npm i
#             npm run test
            
#   scan-frontend:
#     docker:
#       # Docker image here
#       - image: circleci/node:13.8.0
#     steps:
#       # Checkout code from git
#       - checkout
#       # Restore from cache
#       - restore_cache:
#           keys: [frontend-build]
#       # Your job code here
#       - run:
#           name: Scan front-end
#           command: |
#             cd frontend
#             npm install
#             npm audit fix --audit-level=critical --force
#             npm audit fix --audit-level=critical --force
#             npm audit --audit-level=critical
#       - slack/notify:
#           channel: $SLACK_DEFAULT_CHANNEL
#           event: fail
#           template: basic_fail_1

#   scan-backend:
#     docker:
#       # Docker image here
#       - image: circleci/node:13.8.0
#     steps:
#       # Checkout code from git
#       - checkout
#       # Restore from cache
#       - restore_cache:
#           keys: [backend-build]
#       # Your job code here
#       - run:
#           name: Scan back-end
#           command: |
#             cd backend
#             npm install
#             npm audit fix --audit-level=critical --force
#             npm audit fix --audit-level=critical --force
#             npm audit --audit-level=critical
#       - slack/notify:
#           channel: $SLACK_DEFAULT_CHANNEL
#           event: fail
#           template: basic_fail_1

#   deploy-infrastructure:
#     docker: 
#       # Docker image here that supports AWS CLI
#       - image: cimg/base:stable
#     steps:
#       # Checkout code from git
#       - checkout
#       - install_awscli
#       - run:
#           name: Deploy back-end infrastructure
#           command: |
#             aws cloudformation deploy \
#             --template-file .circleci/files/backend.yml \
#             --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
#             --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
#             --tags project=udapeople
#       - run:
#           name: Deploy front-end infrastructure
#           command: |
#             aws cloudformation deploy \
#               --template-file .circleci/files/frontend.yml \
#               --tags project=udapeople \
#               --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
#               --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
#       - run:
#           name: Add back-end ip to ansible inventory
#           command: |
#             BACKEND_PUBLIC_IP=$(aws --region us-east-1 ec2 describe-instances --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --query 'Reservations[*].Instances[*].PublicDnsName' --output text)
#             echo $BACKEND_PUBLIC_IP >> .circleci/ansible/inventory.txt
#             cat .circleci/ansible/inventory.txt
#       - persist_to_workspace:
#           root: ~/
#           paths:
#             - project/.circleci/ansible/inventory.txt
#       # Here's where you will add some code to rollback on failure 
#       - destroy-environment  
         
#   configure-infrastructure:
#     docker:
#       - image: cimg/base:stable
#     steps:
#       - checkout
#       - install_awscli
#       - install_ansible
#       - add_ssh_keys:
#           fingerprints: ["a3:53:76:98:e7:60:8e:ce:d2:82:a1:4f:77:e7:1a:7f"]
#       - attach_workspace:
#           at: ~/
#       - run:
#           name: Configure Server
#           command: |
#             cd .circleci/ansible
#             cat inventory.txt
#             ansible-playbook -i inventory.txt configure-server.yml
#       - destroy-environment

#   # configure-infrastructure:
#   #   docker:
#   #     # Docker image here that supports Ansible
#   #     - image: python:3.7-alpine3.11
#   #   steps:
#   #     # Checkout code from git
#   #     - checkout       
#   #     # Add ssh keys with fingerprint
#   #     - add_ssh_keys:
#   #         fingerprints: ["a3:53:76:98:e7:60:8e:ce:d2:82:a1:4f:77:e7:1a:7f"]
#   #     - attach_workspace:
#   #         at: ~/
#   #     - run:
#   #         name: Install dependencies
#   #         command: |
#   #           apk add curl
#   #           apk add --upgrade bash
#   #           apk add --update ansible
#   #           apk add openssh-client
#   #           apk add --update tar
#   #           apk add --update gzip
#   #           pip3 install awscli
#   #     - run:
#   #         name: Configure server
#   #         command: |
#   #           export ANSIBLE_HOST_KEY_CHECKING=False
#   #           cd .circleci/ansible
#   #           ansible-playbook -i inventory.txt configure-server.yml -v 
#   #     - destroy-environment    

#   run-migrations:
#     docker:
#       - image: cimg/node:13.8.0
#     steps:
#       - checkout
#       - install_awscli
#       - restore_cache:
#           keys:
#             - backend-build
#       - run:
#           name: Run migrations
#           command: |
#             cd backend
#             npm install
#             npm run migrations > migrations_dump.txt
#       - run:
#           name: Send migration status to kvdb.io
#           command: |
#             if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
#             then
#               curl https://kvdb.io/LBcnJjxskczGJWNszqSJsH/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
#             fi
#       - destroy-environment
#       - revert-migrations

#   deploy-frontend:
#     docker:
#       # Docker image here that supports AWS CLI
#       - image: amazon/aws-cli
#     steps:
#       # Checkout code from git
#       - checkout
#       - run:
#           name: Install tar and gzip
#           command: |
#             yum install -y tar gzip curl gcc-c++ make python3-pip python37
#       - restore_cache:
#           keys:
#             - frontend-build
#       - run:
#           name: Install dependencies
#           command: |
#             yum install https://rpm.nodesource.com/pub_16.x/nodistro/repo/nodesource-release-nodistro-1.noarch.rpm -y
#             yum install nodejs -y --setopt=nodesource-nodejs.module_hotfixes=1
#             node -v
#             npm -v              
#       - run:
#           name: Install node
#           command: |
#             curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.5/install.sh | bash
#             export NVM_DIR="$HOME/.nvm"
#             [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
#             nvm install 16
#       - run:
#           name: Install ansible and awscli
#           command: |
#             pip3 install ansible
#             pip3 install awscli
#       - run:
#           name: Get backend url
#           command: |
#             export BACKEND_IP=$(aws --region us-east-1 ec2 describe-instances --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --query 'Reservations[*].Instances[*].PublicDnsName' --output text)
#             echo $BACKEND_IP
#             export API_URL="http://${BACKEND_IP}:3030"
#             echo "${API_URL}"
#             echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
#             cat frontend/.env
#       - run:
#           name: Deploy frontend objects
#           command: |
#             cd frontend
#             npm install
#             npm run build
#             tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
#             aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
#       - persist_to_workspace:
#           root: ~/
#           paths:
#             - project/frontend/.env
#       # Here's where you will add some code to rollback on failure
#       - destroy-environment
#       - revert-migrations         
                    
#   deploy-backend:
#     docker:
#       # Docker image here that supports Ansible
#       - image: cimg/python:3.7-node
#     steps:
#       - checkout       
#       - add_ssh_keys:
#           fingerprints: ["a3:53:76:98:e7:60:8e:ce:d2:82:a1:4f:77:e7:1a:7f"]
#       - attach_workspace:
#           at: ~/
#       - run:
#           name: Install aws dependencies
#           command: |
#             curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
#             unzip awscliv2.zip
#             sudo ./aws/install
#       - run:
#           name: Install Ansible
#           command: |
#             sudo apt update
#             sudo apt install software-properties-common -y
#             sudo add-apt-repository --yes --update ppa:ansible/ansible
#             sudo apt install ansible -y
#       - run:
#           name: Deploy backend
#           command: |
#             cd backend
#             npm i
#             npm run build
#             cd ..
#             tar -C backend -czvf artifact.tar.gz .
#             mkdir -p ~/project/.circleci/ansible/roles/deploy/files/
#             mv artifact.tar.gz .circleci/ansible/roles/deploy/files/artifact.tar.gz
#             cd .circleci/ansible
#             echo "Contents  of the inventory.txt file is -------"
#             cat inventory.txt
#             ansible-playbook -i inventory.txt deploy-backend.yml
#       # Here's where you will add some code to rollback on failure  
#       - revert-migrations
#       - destroy-environment     

#   smoke-test:
#     docker:
#       # Lightweight Docker image 
#       - image: cimg/node:13.8.0
#     steps:
#       - checkout
#       - add_ssh_keys:
#           fingerprints: ["a3:53:76:98:e7:60:8e:ce:d2:82:a1:4f:77:e7:1a:7f"]
#       - run:
#           name: Install dependencies
#           command: |
#             curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
#             unzip awscliv2.zip
#             sudo ./aws/install
#             aws --version
#       - run:
#           name: Backend smoke test.
#           command: |
#             BACKEND_IP=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --query 'Reservations[*].Instances[*].PublicDnsName' --output text)
#             export API_URL="http://${BACKEND_IP}:3030"
#             echo "${API_URL}"  
#             curl -s ${API_URL}/api/status -v 
#             if curl -s ${API_URL}/api/status | grep "ok"
#             then
#               exit 0
#             else
#               exit 1
#             fi
#       - run:
#           name: Frontend smoke test.
#           command: |
#             URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
#             echo ${URL} 
#             if curl -s ${URL} | grep "Welcome"
#             then
#               return 0
#             else
#               return 1
#             fi
#       # - destroy-environment  
#       # - revert-migrations

#   cloudfront-update:
#     docker:
#       # Docker image here that supports AWS CLI
#       - image: amazon/aws-cli
#     steps:
#       - checkout
#       - run:
#           name: Save Old Workflow ID to kvdb.io
#           command: |
#             export OldWorkflowID=$(aws --region us-east-1 cloudformation list-exports --query "Exports[?Name==\`WorkflowID\`].Value" --no-paginate --output text)
#             echo "Old Wokflow ID: $OldWorkflowID"
#             curl https://kvdb.io/LBcnJjxskczGJWNszqSJsH/old_workflow_id -d "${OldWorkflowID}"
#       - run:
#           name: Update cloudfront distribution
#           command: |
#             aws cloudformation deploy \
#                     --template-file .circleci/files/cloudfront.yml \
#                     --stack-name InitialStack \
#                     --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
#                     --region us-east-1 \
#                     --tags project=udapeople
            
#       - revert-migrations
#       - destroy-environment

# cleanup:
#     docker:
#       # Docker image here
#     steps:
#       # Checkout code from git
#       - run:
#           name: Get old stack workflow id
#           command: |
#             # your code here
#             export OldWorkflowID="the id here"
#             export STACKS=[] #put the list of stacks here
#       - run:
#           name: Remove old stacks and files
#           command: |
#             if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#             then
#               # your code here
#             fi
            

# workflows:
#   default:
#     jobs:
#       - build-frontend
#       - build-backend
#       - test-frontend:
#           requires: [build-frontend]
#       - test-backend:
#           requires: [build-backend]
#       - scan-backend:
#           requires: [build-backend]
#       - scan-frontend:
#           requires: [build-frontend]
#       - deploy-infrastructure:
#           requires: [test-frontend, test-backend, scan-frontend, scan-backend]
#           filters:
#             branches:
#               only: [test-feature-branch]
#       - configure-infrastructure:
#           requires: [deploy-infrastructure]
#       - run-migrations:
#           requires: [configure-infrastructure]
#       - deploy-frontend:
#           requires: [run-migrations]
#       - deploy-backend:
#           requires: [run-migrations]
#       - smoke-test:
#           requires: [deploy-backend, deploy-frontend]
#       # - cloudfront-update:
#       #     requires: [smoke-test]
#       # - cleanup:
#       #     requires: [cloudfront-update]